------------- Collections - Introduction -----------
val an Mutable Object: 
scala> val v=scala.collection.mutable.ArrayBuffer(1,2,3)
v: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(1, 2, 3)
scala> v += 4  //res0: v.type = ArrayBuffer(1, 2, 3, 4) 
//Note this is a method call & not re-assignment
scala> v += 5 //res1: v.type = ArrayBuffer(1, 2, 3, 4, 5)


scala> var v=scala.collection.mutable.ArrayBuffer(1,2,3)
v: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(1, 2, 3)
scala> v += 4 //res4: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(1, 2, 3, 4)
scala> v -= 3 //res6: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(1, 2, 4, 5)
scala> v //res7: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(1, 2, 4, 5)
Note: +method takes String and returns a string and hence this will fail, u should use :+ to append the element and reassign the value.
scala> v = v+6
<console>:12: error: type mismatch; found   : Int(6),  required: String.        v = v+6
scala> v = v :+ 6 //v: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(1, 2, 4, 5, 6)


scala> var v=scala.collection.mutable.ArrayBuffer(3,4,5)
v: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 4, 5)

//append on the original list
scala> v += 7 //res8: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 4, 5, 7)

//below statement will modification in the copy
scala> v :+ 2//res9: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 4, 5, 7, 2)
scala> v //res10: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 4, 5, 7)

//below statement will actually append to the original variable ‘v’
scala> v = v :+ 9 //v: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 4, 5, 7, 9)
scala> v   //res11: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 4, 5, 7, 9)

scala> val v = List(1,2,3) //v: List[Int] = List(1, 2, 3) //List is Immutable
scala> v += 4  // append operation is not allowed.
//<console>:13: error: value += is not a member of List[Int] Expression does not convert to assignment because receiver is not assignable. v += 4

scala> val v2 = v :+ 4 // :+ appends the value  //v2: List[Int] = List(1, 2, 3, 4)

scala> val v3 = 5 +: v2 // +: prepends the value  //v3: List[Int] = List(5, 1, 2, 3, 4)

--------- var with Immutable object:
scala> var v =  List(1,2,3) //v: List[Int] = List(1, 2, 3)

scala>  v +=4 //Prepend not allowed.
<console>:13: error: value += is not a member of List[Int] Expression does not convert to assignment because:
    type mismatch;
     found   : Int(4)
     required: String
    expansion: v = v.$plus(4)
        v +=4
          ^
scala>  v +:=4 //Reassignment, could be through of as v=v+:4 which is prepending the value.

scala> v //res32: List[Int] = List(4, 1, 2, 3)

--------- Tuple 
scala> var emp=(101,"Suraj",5000f) //creates Tuple3 Object
emp: (Int, String, Float) = (101,Suraj,5000.0)

scala> println(emp._1)  //101

scala> println(s"${emp._1}, ${emp._2}, ${emp._3}") //101, Suraj, 5000.0

Currently Scala support Tuple only till 22, ie u can have 22 elements while creating a tuple & that'll be of type Tuple22. So at max u can just have only 22 elements in the Tuple.
scala> var emp=(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)
<console>:1: error: too many elements for tuple: 23, allowed: 22

scala> val(empId,empName,salary)=(101,"Suraj",3000f)
empId: Int = 101
empName: String = Suraj
salary: Float = 3000.0
Suppose u don’t want to store salary we can declare tuple as below:
scala> val(empId,empName,_)=(101,"Suraj",3000f)
empId: Int = 101
empName: String = Suraj

A 2-parameter tuple can also be created using the below approach:
scala> val emp=(101->"Suraj")  //emp: (Int, String) = (101,Suraj)
scala> val it = emp.productIterator //it: Iterator[Any] = <iterator>
scala> for(e <- it )print(e) //101Suraj

A tuple can be converted to array using the below approach:
scala> emp.productIterator.toArray //res2: Array[Any] = Array(101, Suraj)

scala> val list=List(1,2,3,4,5) //list: List[Int] = List(1, 2, 3, 4, 5)
scala> val list2=list.map(num => num * 2) //list2: List[Int] = List(2, 4, 6, 8, 10)
scala> list.mkString("[",":","]") //res4: String = [1:2:3:4:5]

------- Using iterator in collections
scala> val numList=1 to 10 toList //numList: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
scala> val it = numList.iterator //it: Iterator[Int] = <iterator>
scala>while(it.hasNext){val currentValue=it.next();print(currentValue+" ");}//1 2 3 4 5 6 7 8 9 10

An iterator can be easily converted back to an array using the below approach.
scala> val it = numList.iterator //it: Iterator[Int] = <iterator>
scala> val numArr = it.toArray //numArr: Array[Int] = Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)



